# Deze workflow checks de git repo
# kijkt als die overeenkomt wat er in de slq server is
# als de slq server niet hetzelfde is gaat het  de tables die overeen komen verwijderen en dan opnieuw 
# crieren in de server met de ddl script


name: Sync DDl scripts

run-name: Syncing DDL scripts with main

on: 
    push:
         branches:
             - main
         paths:
             - DDL/**
    workflow_dispatch:

    
jobs:
    syncing-ddl:
        runs-on: ubuntu-latest

        steps:
        - name: Check out code
          uses: actions/checkout@v2
          with:
            fetch-depth: 0  

        - name: Install PostgreSQL client
          run: |
            sudo apt-get update
            sudo apt-get install -y postgresql-client

        - name: Verify Git Fetch
          run: |
            git fetch origin main
            git log --oneline
          shell: bash

        - name: Identify modified or new SQL scripts
          id: diff
          run: |
            git fetch origin main
            git diff --name-only origin/main -- DDL/*.sql | tee diff_files.txt
            diff_files=$(cat diff_files.txt | tr '\n' ' ')
            echo "diff_files=$diff_files" >> $GITHUB_ENV
            echo "Identified modified or new SQL scripts: $diff_files"
          shell: bash
    
        - name: List modified or new SQL scripts
          run: |
            echo "Modified or new SQL scripts: ${{ env.diff_files }}"
    
        - name: Debug diff_files variable
          run: |
            echo "Debug: diff_files = ${{ env.diff_files }}"
            if [ -z "${{ env.diff_files }}" ]; then
              echo "No SQL files to process."
            else
              echo "Files to process: ${{ env.diff_files }}"
            fi
      
        - name: Sync with Database
          if: env.diff_files != ''
          env:
            PGHOST: ${{ secrets.CBS_HOST }}
            PGPORT: ${{ secrets.CBS_PORT }}
            PGUSER: ${{ secrets.CBS_USERNAME }}
            PGPASSWORD: ${{ secrets.CBS_WW }}
            PGDATABASE: ${{ secrets.CBS_DBNAME }}
          run: |
            set -e  # Exit on error
            cd DDL
            for file in ${{ env.diff_files }}; do
              table_name=$(basename "$file" .sql)
              echo "Processing $table_name"
                
              if psql -c "\dt" | grep -q "$table_name"; then
                echo "Table $table_name exists, dropping it"
                psql -c "DROP TABLE IF EXISTS $table_name"
              fi
                
              echo "Running script $file"
              psql -f "$file"
            done
          shell: bash