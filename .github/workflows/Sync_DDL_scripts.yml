# Deze workflow checks de git repo
# kijkt als die overeenkomt wat er in de slq server is
# als de slq server niet hetzelfde is gaat het  de tables die overeen komen verwijderen en dan opnieuw 
# crieren in de server met de ddl script


name: Sync DDl scripts

run-name: Syncing DDL scripts with main

on: 
    push:
         branches:
             - main
         paths:
             - DDL/**
    workflow_dispatch:

    
jobs:
    syncing-ddl:
        runs-on: ubuntu-latest

        steps:
            - name: Check the code
              uses: actions/checkout@v2


            - name: Install postgre client
              run: sudo apt-get update && sudo apt-get install -y postgresql-client

            - name: Identify modified or new SQL scripts
              id: diff
              run: |
                git fetch origin main
                diff_files=$(git diff --name-only origin/main -- DDL/*.sql | tr '\n' ' ')
                echo "diff_files=$diff_files" >> $GITHUB_ENV
                echo "::set-output name=diff_files::$diff_files"
      
            - name: List modified or new SQL scripts
              run: |
                echo "Modified or new SQL scripts: ${{ env.diff_files }}"
      
            - name: Sync with Database
              if: ${{ env.diff_files != '' }}
              env:
                PGHOST: ${{ secrets.CBS_HOST }}
                PGPORT: ${{ secrets.CBS_PORT }}
                PGUSER: ${{ secrets.CBS_USERNAME }}
                PGPASSWORD: ${{ secrets.CBS_WW }}
                PGDATABASE: ${{ secrets.CBS_DBNAME }}
              run: |
                set -e  # Exit on error
      
                cd $GITHUB_WORKSPACE/DDL
      
               
                diff_files="${{ env.diff_files }}"
                echo "Processing files: $diff_files"
      
                for file in $diff_files; do
                  table=$(basename "$file" .sql)
                  echo "Processing $table"
      
                  if psql -t -c "SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = '$table');" | grep -q 't'; then
                    echo "Dropping existing table $table"
                    psql -c "DROP TABLE IF EXISTS \"$table\" CASCADE;"
                  fi
      
                  echo "Running script $file"
                  psql -f "$file"
                done